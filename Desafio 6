import threading
import time
import random

# Tamaño máximo del búfer
tamano_buffer = 5

# Búfer compartido
buffer = []
mutex = threading.Semaphore(1)
sem_productor = threading.Semaphore(tamano_buffer)
sem_consumidor = threading.Semaphore(0)

def productor():
    for _ in range(10):
        item = random.randint(1, 100)
        sem_productor.acquire()
        mutex.acquire()
        buffer.append(item)
        print(f"Productor agrega: {item}. Búfer: {buffer}")
        mutex.release()
        sem_consumidor.release()
        time.sleep(random.uniform(0.1, 0.5))

def consumidor():
    for _ in range(10):
        sem_consumidor.acquire()
        mutex.acquire()
        item = buffer.pop(0)
        print(f"Consumidor retira: {item}. Búfer: {buffer}")
        mutex.release()
        sem_productor.release()
        time.sleep(random.uniform(0.1, 0.5))

# Crear hilos para el productor y el consumidor
hilo_productor = threading.Thread(target=productor)
hilo_consumidor = threading.Thread(target=consumidor)

# Iniciar los hilos
hilo_productor.start()
hilo_consumidor.start()

# Esperar a que ambos hilos terminen
hilo_productor.join()
hilo_consumidor.join()

print("Programa finalizado.")
