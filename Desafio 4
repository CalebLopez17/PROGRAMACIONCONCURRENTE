import threading

# Semáforos para controlar el orden de ejecución
sem1 = threading.Semaphore(1)
sem2 = threading.Semaphore(0)
sem3 = threading.Semaphore(0)

def imprimir_mensaje(mensaje, sem_actual, sem_siguiente):
    for _ in range(5):  # Repetir cinco veces para cada hilo
        # Esperar hasta que el semáforo actual esté disponible
        sem_actual.acquire()

        # Imprimir el mensaje del hilo
        print(mensaje)

        # Liberar el semáforo siguiente para permitir que el siguiente hilo ejecute
        sem_siguiente.release()

# Crear tres hilos
hilo1 = threading.Thread(target=imprimir_mensaje, args=('Hilo 1', sem1, sem2))
hilo2 = threading.Thread(target=imprimir_mensaje, args=('Hilo 2', sem2, sem3))
hilo3 = threading.Thread(target=imprimir_mensaje, args=('Hilo 3', sem3, sem1))

# Iniciar los hilos
hilo1.start()
hilo2.start()
hilo3.start()

# Esperar a que todos los hilos terminen
hilo1.join()
hilo2.join()
hilo3.join()

print("Programa finalizado.")
