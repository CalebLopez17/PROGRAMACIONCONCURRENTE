#include <stdio.h>
#include <mpi.h>

#define TAG 0

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        fprintf(stderr, "Se necesitan al menos 2 procesos para este programa.\n");
        MPI_Finalize();
        return 1;
    }

    if (rank == 0) {
        // Proceso maestro
        char mensaje_enviar[] = "Hola, esclavos!";
        for (int i = 1; i < size; i++) {
            MPI_Send(mensaje_enviar, sizeof(mensaje_enviar), MPI_CHAR, i, TAG, MPI_COMM_WORLD);
        }

        // Recibir respuestas de los esclavos
        for (int i = 1; i < size; i++) {
            char mensaje_recibir[100];
            MPI_Recv(mensaje_recibir, sizeof(mensaje_recibir), MPI_CHAR, i, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            printf("Maestro recibió respuesta de esclavo %d: %s\n", i, mensaje_recibir);
        }
    } else {
        // Procesos esclavos
        char mensaje_recibir[100];
        MPI_Recv(mensaje_recibir, sizeof(mensaje_recibir), MPI_CHAR, 0, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        // Procesamiento en el esclavo (aquí puedes realizar alguna tarea)
        printf("Esclavo %d recibió mensaje: %s\n", rank, mensaje_recibir);

        // Responder al maestro
        char mensaje_enviar[] = "¡Hola, maestro!";
        MPI_Send(mensaje_enviar, sizeof(mensaje_enviar), MPI_CHAR, 0, TAG, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}
