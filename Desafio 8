import multiprocessing
import time

def procesar_tarea(tarea):
    # Simular procesamiento de la tarea
    time.sleep(1)
    return f"Resultado de la tarea: {tarea}"

def servidor(tarea_compartida, resultados_compartidos, indice_nodo):
    while True:
        tarea = tarea_compartida.get()
        if tarea is None:
            break  # Señal para detener el servidor

        resultado = procesar_tarea(tarea)
        resultados_compartidos[indice_nodo].append(resultado)

if __name__ == "__main__":
    # Configuración
    num_nodos = 3
    tareas_por_nodo = 5

    # Colas compartidas para tareas y resultados
    tarea_compartida = multiprocessing.Queue()
    resultados_compartidos = [multiprocessing.Manager().list() for _ in range(num_nodos)]

    # Crear procesos del servidor
    procesos_servidores = []
    for i in range(num_nodos):
        proceso_servidor = multiprocessing.Process(target=servidor, args=(tarea_compartida, resultados_compartidos, i))
        procesos_servidores.append(proceso_servidor)
        proceso_servidor.start()

    # Enviar tareas a los nodos
    for i in range(num_nodos * tareas_por_nodo):
        tarea_compartida.put(f"Tarea {i + 1}")

    # Enviar señal para detener los servidores
    for _ in range(num_nodos):
        tarea_compartida.put(None)

    # Esperar a que todos los servidores terminen
    for proceso_servidor in procesos_servidores:
        proceso_servidor.join()

    # 
